# coding: utf-8
import vtk
import numpy as np
import nibabel as nib
import trimeshpy
img = nib.load('1001_2D_T2_0.25_MB4_S2_testIM.nii.gz')
vtkreader = vtk.vtkPolyDataReader()
vtkreader.SetFileName('7t_surf/rh.gray.7t.vtk')
vtkreader.Update()
subdivider = vtk.vtkAdaptiveSubdivisionFilter()
subdivider.SetInputConnection(vtkreader.GetOutputPort())
subdivider.SetMaximumEdgeLength(0.19)
subdivider.Update()
normal_polydata = vtk.vtkPolyDataNormals()
 normal_polydata.SetInputConnection(subdivider.GetOutputPort())
 normal_polydata.ComputePointNormalsOn()
 normal_polydata.Update()
 pointdata = normal_polydata.GetOutput().GetPointData()
 normals = pointdata.GetNormals()
 points = normal_polydata.GetOutput().GetPoints()
 points_np = vtk.util.numpy_support.vtk_to_numpy(points.GetData())
 normals_np = vtk.util.numpy_support.vtk_to_numpy(normals)
normal_polydata = vtk.vtkPolyDataNormals()
normal_polydata.SetInputConnection(subdivider.GetOutputPort())
normal_polydata.ComputePointNormalsOn()
normal_polydata.Update()
pointdata = normal_polydata.GetOutput().GetPointData()
normals = pointdata.GetNormals()
points = normal_polydata.GetOutput().GetPoints()
points_np = vtk.util.numpy_support.vtk_to_numpy(points.GetData())
normals_np = vtk.util.numpy_support.vtk_to_numpy(normals)
normals_surface_np = points_np + normals_np
normals_vox = trimeshpy.vtk_util.vtk_to_vox(normals_surface_np,img)
surface_vox = trimeshpy.vtk_util.vtk_to_vox(points_np,img)
normal_vector_vox = np.zeros(normals_vox.shape)
for i in range(len(normal_vector_vox)):
    normal_vector_vox[i] = (normals_vox[i] - surface_vox[i]) / np.linalg.norm(normals_vox[i]- surface_vox[i])
    
x_normal_dot_product = []
y_normal_dot_product = []
z_normal_dot_product = []
del x_normal_dot_product,y_normal_dot_product,z_normal_dot_product
x_normal_dot_product = []
y_normal_dot_product = []
z_normal_dot_product = []
x_vector = np.zeros(surface_vox.shape)
y_vector = np.zeros(surface_vox.shape)
z_vector = np.zeros(surface_vox.shape)
for i in range(len(surface_vox)):
    x_vector[i,0] = 1
    y_vector[i,1] = 1
    z_vector[i,2] = 1
    
for i in range(len(normal_vector_vox)):
    x_normal_dot_product.append(np.dot(normal_vector_vox[i],x_vector[i]))
    y_normal_dot_product.append(np.dot(normal_vector_vox[i],y_vector[i]))
    z_normal_dot_product.append(np.dot(normal_vector_vox[i],z_vector[i]))
    
max(x_normal_dot_product)
min(x_normal_dot_product)
y_normal_dot_product
y_normal_dot_product[0]
import math
math.ceil((y_normal_dot_product[0]*1e5)/1e5)
math.ceil((y_normal_dot_product[0]*1e-5)/1e-5)
round(y_normal_dot_product[0],4)
y_normal_dot_product
whos
new_rh_gray = subdivider.GetOutput()
np_tesselated = numpy_support.vtk_to_numpy(new_rh_gray.GetPoints().GetData())
new_rh_gray = subdivider.GetOutput()
np_tesselated = vtk.util.numpy_support.vtk_to_numpy(new_rh_gray.GetPoints().GetData())
vts_vox_image = np.zeros(img.shape)
for i in range(len(rh_gray)):
    if rh_gray[i,2] <= 79:
        j = rh_gray[i]
        vts_vox_image[j[0],j[1],j[2]] += 100
        
rh_gray = vtk_ut.vtk_to_vox(np_tesselated, img).astype(int)
rh_gray = trimeshpy.vtk_util.vtk_to_vox(np_tesselated, img).astype(int)
for i in range(len(rh_gray)):
    if rh_gray[i,2] <= 79:
        j = rh_gray[i]
        vts_vox_image[j[0],j[1],j[2]] += 100
        
nib.save(nib.Nifti1Image(vts_vox_image,img.affine),'7t_surf/tesselated_rh_gray.nii.gz')
whos
whos
x_normal_dot_product[0]
max(x_normal_dot_product)
min(x_normal_dot_product)
math.acos(x_normal_dot_product[0])
math.acos(x_normal_dot_product[0]) * 180 /math.pi
x_normal_dot_product
%save -r /home/local/VANDERBILT/ramadak/git_repositories/7T_cortical_thickness_project/test_phase/dot_product_angle 1-42
x_normal_dot_product
math.acos(x_normal_dot_product[0]) * 180 /math.pi
x_normal_dot_product = []
y_normal_dot_product = []
z_normal_dot_product = []
history
del x_normal_dot_product,y_normal_dot_product,z_normal_dot_product
x_normal_dot_product = np.zeros(len(normal_vector_vox))
y_normal_dot_product = np.zeros(len(normal_vector_vox))
z_normal_dot_product = np.zeros(len(normal_vector_vox))
for i in range(len(normal_vector_vox)):
    x_normal_dot_product.append(math.acos(np.dot(normal_vector_vox[i],x_vector[i])) * 180/math.pi)
    y_normal_dot_product.append(math.acos(np.dot(normal_vector_vox[i],y_vector[i])) * 180/math.pi)
    z_normal_dot_product.append(math.acos(np.dot(normal_vector_vox[i],z_vector[i])) * 180/math.pi)
    
for i in range(len(normal_vector_vox)):
    x_normal_dot_product[i]= math.acos(np.dot(normal_vector_vox[i],x_vector[i])) * 180/math.pi
    y_normal_dot_product[i]= math.acos(np.dot(normal_vector_vox[i],y_vector[i])) * 180/math.pi
    z_normal_dot_product[i] = math.acos(np.dot(normal_vector_vox[i],z_vector[i])) * 180/math.pi
    
x_normal_dot_product
x_normal_dot_product_normalized = np.zeros(len(normal_vector_vox))
y_normal_dot_product_normalized = np.zeros(len(normal_vector_vox))
z_normal_dot_product_normalized = np.zeros(len(normal_vector_vox))
for i in range(len(x_normal_dot_product)):
    if x_normal_dot_product[i] <= 90.0:
        x_normal_dot_product_normalized[i] = x_normal_dot_product[i]
    else:
        x_normal_dot_product_normalized[i] = 180.0 - x_normal_dot_product[i]
    if y_normal_dot_product[i] <= 90.0:
        y_normal_dot_product_normalized[i] = y_normal_dot_product[i]
    else:
        y_normal_dot_product_normalized[i] = 180.0 - y_normal_dot_product[i]
    if x_normal_dot_product[i] <= 90.0:
        z_normal_dot_product_normalized[i] = z_normal_dot_product[i]
    else:
        z_normal_dot_product_normalized[i] = 180.0 - z_normal_dot_product[i]
x_normal_dot_product[0]
x_normal_dot_product.max()
x_normal_dot_product_normalized.max()
max(vts_vox_image)
type(vts_vox_image)
vts_vox_image.shape
whos
vts_vox_image[:,:,:].max()
vts_vox_image[:,:,:].min()
import matplotlib.pyplot as plt
from matplotlib import colors
import matplotlib.pyplot as plt
import matplotlib.pyplot as plt
whos
np.savetxt?
np.savetxt('/home/local/VANDERBILT/ramadak/3T_7T/7t_surf/x_angles.txt',x_normal_dot_product_normalized)
x_normal_dot_product_normalized.shape
np.savetxt('/home/local/VANDERBILT/ramadak/3T_7T/7t_surf/y_angles.txt',y_normal_dot_product_normalized)
np.savetxt('/home/local/VANDERBILT/ramadak/3T_7T/7t_surf/z_angles.txt',z_normal_dot_product_normalized)
surface_vox[0]
surface_img = np.zeros(img.shape)
for i in range(len(surface_vox)):
    if surface_vox[i,2] <= 79:
        j = surface_vox[i].astype(int)
        indices = (tuple([int(j[0]),int(j[1]),int(j[2])]))
        surface_img[indices] = x_normal_dot_product_normalized/90.0 * 17000.00
        
for i in range(len(surface_vox)):
    if surface_vox[i,2] <= 79:
        j = surface_vox[i].astype(int)
        indices = (tuple([int(j[0]),int(j[1]),int(j[2])]))
        surface_img[indices] = x_normal_dot_product_normalized[i]/90.0 * 17000.00
        
nib.save(nib.Nifti1Image(surface_img,img.affine), 'rh_gray_x_angle_colors.nii.gz')
pwd
surface_img = np.zeros(img.shape)
for i in range(len(surface_vox)):
    if surface_vox[i,2] <= 79:
        j = surface_vox[i].astype(int)
        indices = (tuple([int(j[0]),int(j[1]),int(j[2])]))
        surface_img[indices] = y_normal_dot_product_normalized[i]/90.0 * 17000.00
        
nib.save(nib.Nifti1Image(surface_img,img.affine), 'rh_gray_y_angle_colors.nii.gz')
surface_img = np.zeros(img.shape)
for i in range(len(surface_vox)):
    if surface_vox[i,2] <= 79:
        j = surface_vox[i].astype(int)
        indices = (tuple([int(j[0]),int(j[1]),int(j[2])]))
        surface_img[indices] = z_normal_dot_product_normalized[i]/90.0 * 17000.00
        
nib.save(nib.Nifti1Image(surface_img,img.affine), 'rh_gray_z_angle_colors.nii.gz')
whos
w
surface_img = np.zeros(img.shape)
surface_img.shape
surface_vox.shape
surface_vox[0]
z_normal_dot_product_normalized.shape
z_normal_dot_product_normalized[0]
history
z_normal_dot_product_normalized = np.zeros(len(normal_vector_vox))
for i in range(len(z_normal_dot_product)):
    if z_normal_dot_product[i] <= 90.0:
        z_normal_dot_product_normalized[i] = z_normal_dot_product[i]
    else:
        z_normal_dot_product_normalized[i] = 180.0 - z_normal_dot_product[i]
        
surface_img = np.zeros(img.shape)
for i in range(len(surface_vox)):
    if surface_vox[i,2] <= 79:
        j = surface_vox[i].astype(int)
        indices = (tuple([int(j[0]),int(j[1]),int(j[2])]))
        surface_img[indices] = z_normal_dot_product_normalized[i]/90.0 * 17000.00
        
nib.save(nib.Nifti1Image(surface_img,img.affine), 'rh_gray_z_angle_colors.nii.gz')
surface_img = np.zeros(img.shape)
for i in range(len(surface_vox)):
    if surface_vox[i,2] <= 79:
        j = surface_vox[i].astype(int)
        indices = (tuple([int(j[0]),int(j[1]),int(j[2])]))
        if z_normal_dot_product_normalized[i] >= 80.0:
            surface_img[indices] = z_normal_dot_product_normalized[i]/90.0 * 17000.00
        else:
            surface_img[indices] = 100.00
        
nib.save(nib.Nifti1Image(surface_img,img.affine), 'rh_gray_z_angle_colors.nii.gz')
surface_img = np.zeros(img.shape)
for i in range(len(surface_vox)):
    if surface_vox[i,2] <= 79:
        j = surface_vox[i].astype(int)
        indices = (tuple([int(j[0]),int(j[1]),int(j[2])]))
        if z_normal_dot_product_normalized[i] >= 80.0:
            surface_img[indices] = 1000.00
        else:
            surface_img[indices] = 0.00
        
history
whos
surface_vox[0]
normals_vox[0]
normals_vox[0:10]
surface_vox[0:10]
surface_vox[700:710]
normals_vox[700:710]
x_vox = surface_vox[:,,]
surface_vox[:,0]
surface_vox[:,0].shape
np.savetxt('x_surf.txt',surface_vox[:,0])
surface_vox[:,1]
np.savetxt('y_surf.txt',surface_vox[:,1])
np.savetxt('z_surf.txt',surface_vox[:,2])
whos
vtkreader = vtk.vtkPolyDataReader()
vtkreader.SetFileName('/home/local/VANDERBILT/ramadak/3T_7T/rh.gray.3t.vtk')
vtkreader.Update()
vtk_vox = trimeshpy.vtk_util.vtk_to_vox?
vtk_vox = trimeshpy.vtk_util.vtk_to_vox(vtkreader.Output(),img)
history
polydata = vtkreader.GetOutput()
np_data = vtk.util.numpy_support.vtk_to_numpy(polydata.GetPoints())
np_data = vtk.util.numpy_support.vtk_to_numpy(polydata.GetPoints().GetData())
vtk_vox = trimeshpy.vtk_util.vtk_to_vox(np_data,img)
vtk_vox.shape
x_vox = vtk_vox[:,0]
y_vox = vtk_vox[:,1]
z_vox = vtk_vox[:,2]
np.savetxt('z_surf.txt',z_vox)
x_vox
np.savetxt('x_surf.txt',x_vox)
normal = vtk.vtkPolyDataNormals()
normal.SetInputConnection(vtkreader.GetOutputPort())
normal.ComputePointNormalsOn()
normal.Update()
history
normals = normal.GetOutput().GetPointData().GetOutput()
normals = normal.GetOutput()
normals = normal.GetOutput().GetPointData().GetNormals()
points = normal.GetOutput().GetPoints()
normals
normals_np = vtk.util.numpy_support.vtk_to_numpy(normals)
points_np = vtk.util.numpy_support.vtk_to_numpy(points)
points_np = vtk.util.numpy_support.vtk_to_numpy(points.GetData())
points_np.shape
normals_np.shape
normals_np
points_np
normal_points_np = normals_np + points_np
normals_points_np
normal_points_np
history
normal_vector_vox[0]
normal_vector_vox[1]
normal_vector_vox
np.savetxt('x_surf.txt',normal_vector_vox[:,0])
np.savetxt('y_surf.txt',normal_vector_vox[:,1])
np.savetxt('z_surf.txt',normal_vector_vox[:,2])
