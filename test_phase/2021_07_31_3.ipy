# coding: utf-8
import vtk
import numpy as np
import nibabel as nib
vtkreader = vtk.vtkPolyDataReader()
vtkreader.SetFileName('../../3001_239101/CUTTING7T-x-ST7002_v1-x-3001_239101-x-biscuit_mc_v2-x-3921aa5b-7390-40f3-8380-4d866e4afd93/surf/lh.white.aligned.vtk')
vtkreader.Update()
polydata = vtkreader.GetOutput()
vtk_normals = vtk.vtkPolyDataNormals()
vtk_normals.SetInputConnection(vtkreader.GetOutputPort())
vtk_normals.ComputePointNormalsOn()
vtk_normals.Update()
normal_polydata = vtk_normals.GetOutput()
points = normal_polydata.GetPoints()
del points
points = normal_polydata.GetPointData()
normals = points.GetNormals()
from vtk.util import numpy_support
np_normals = numpy_support.vtk_to_numpy(normals.GetData())
np_normals = numpy_support.vtk_to_numpy(normals)
np_normals
np_normals.shape
surface = normal_polydata.GetPoints()
np_surface = numpy_support.vtk_to_numpy(surface)
np_surface = numpy_support.vtk_to_numpy(surface.GetData())
np_surface
np_normals
normals_list = []
for i in range(len(np_normals)):
    normals_list.append([np_surface[i], np_surface[i] + np_normals[i]])
    
normals_list[0]
tractogram_out = nib.streamlines.tractogram.Tractogram(streamlines=normals_list, affine_to_rasmm=np.eye(4))
pwd
nib.streamlines.save(tractogram_out, '../../3001_239101/CUTTING7T-x-ST7002_v1-x-3001_239101-x-biscuit_mc_v2-x-3921aa5b-7390-40f3-8380-4d866e4afd93/surf/tractogram_lh_white.tck')
import dipy
from dipy.io.streamline import load_tractogram, save_tractogram
swi = nib.load('registered_to_3T_aff.nii.gz')
swi
np_normals.shape
np_normals[0]
swi[0]
swi_fdata = swi.get_fdata()
swi_fdata.shape
whos
normal_points = []
for i in range(len(np_normals)):
    normal_points[i].append(np_surface[i] + np_normals[i])
    
for i in range(len(np_normals)):
    normal_points.append(np_surface[i] + np_normals[i])
    
normal_points[0]
np_surface[0]
dist = np.linalg.norm(np_surface[0],normal_points[0])
dist = np.linalg.norm(np_surface[0]-normal_points[0])
dist
sft = load_tractogram('../../3001_239101/CUTTING7T-x-ST7002_v1-x-3001_239101-x-biscuit_mc_v2-x-3921aa5b-7390-40f3-8380-4d866e4afd93/surf/tractogram_lh_white.tck','registered_to_3T_aff.nii.gz')
sft.space
sft.to_voxmm()
sft
coords, faces, volume_info = nb.freesurfer.read_geometry?
coords, faces, volume_info = nib.freesurfer.read_geometry?
coords, faces, volume_info = nib.freesurfer.read_geometry('registered_to_3T_aff.nii.gz',read_metadata=True)
np_normals
vtkreader.GetOutput()
vtkreader.GetFileName()
whos
del vtk_normals
vtk_normals = vtk.vtkPolyDataNormals()
vtk_normals.SetInputConnection(vtkreader.GetOutputPort())
vtkreader.GetFileName()
vtk_normals.ComputePointNormalsOn()
vtk_normals.Update()
polydata_normal = vtk_normals.GetOutput()
pointdata = polydata_normal.GetPointData()
del normals
normals = pointdata.GetNormals()
points = polydata_normal.GetPoints()
normals_np = numpy_support.vtk_to_numpy(normals)
points_np = numpy_support.vtk_to_numpy(points)
points_np = numpy_support.vtk_to_numpy(points.GetData())
points_np[0]
normals_np[0]
trk = []
for i in range(len(np_normals)):
    trk.append([points_np,points_np[i] + normals_np[i]])
    
trk[0]
del trk
trk = []
for i in range(len(np_normals)):
    trk.append([points_np[i],points_np[i] + normals_np[i]])
    
trk[0]
tractogram_out = nib.streamlines.tractogram.Tractogram(streamlines=trk_list, affine_to_rasmm=np.eye(4))
tractogram_out = nib.streamlines.tractogram.Tractogram(streamlines=trk, affine_to_rasmm=np.eye(4))
nib.streamlines.save(tractogram_out, 'tractogram_lh_white_new.tck')
pw
pwd
swi = nib.load('registered_to_3T_aff.nii.gz')
f_data_swi = swi.get_fdata()
f_data_swi
f_data_swi[0]
tck[0]
swi.affine
sft.streamlines._data
new_points = np.dot(np.linalg.inv(swi.affine)[0:3,0:3], sft.streamlines._data)+np.linalg.inv(swi.affine)[0:3,3]
new_points = np.dot(np.linalg.inv(swi.affine)[0:3,0:3], sft.streamlines._data.T)+np.linalg.inv(swi.affine)[0:3,3]
new_points = np.dot(sft.streamlines._data, np.linalg.inv(swi.affine)[0:3,0:3])+np.linalg.inv(swi.affine)[0:3,3]
new_points
swi.shape
new_points = np.dot(sft.streamlines._data, np.linalg.inv(swi.affine)[0:3,0:3])-np.linalg.inv(swi.affine)[0:3,3]
new_points
sft = load_tractogram('tractogram_lh_white_new.tck','registered_to_3T_aff.nii.gz')
new_points = np.dot(sft.streamlines._data, np.linalg.inv(swi.affine)[0:3,0:3])-np.linalg.inv(swi.affine)[0:3,3]
new_points
new_points = np.dot(sft.streamlines._data, np.linalg.inv(swi.affine)[0:3,0:3])+np.linalg.inv(swi.affine)[0:3,3]
new_points
sft.to_vox()
sft.streamlines._data
sft.affine
swi.affine
swi.affine == sft.affine
sft.to_rasmm()
sft
sft.streamlines._data
sft.affine
sft.to_vox()
sft.streamlines._data
np.li
     ...: nalg.inv(swi.affine)[0:3,3]
np.linalg.inv(swi.affine)[0:3,3]
print(sft)
new_points
new_points.astype(np.int32)
a = np.zeros(swi.shape)
for i in new_points.astype(np.int32):
    a[tuple(i)] += 1
    
a
np.max(a)
nib.save(nib.Nifti1Image(a, swi.affine), 'LOLOLOLOLOL.nii.gz')
history
%save -r /home/local/VANDERBILT/ramadak/3T_7T/actual_voxel_point_gen 1-130
whos
points_np[0]
tractogram_out
tractogram_out[0]
trk[0]
pwd
whos
